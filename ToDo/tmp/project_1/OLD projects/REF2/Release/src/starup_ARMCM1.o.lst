   1              	# 1 "../src/starup_ARMCM1.S"
   1              	
   0              	
   0              	
   2              	@/*****************************************************************************
   3              	@ * @file:    startup_MPS_CM0.s
   4              	@ * @purpose: CMSIS Cortex-M0 Core Device Startup File
   5              	@ *           for the ARM 'Microcontroller Prototyping System'
   6              	@ * @version: V1.0
   7              	@ * @date:    19. Aug. 2009
   8              	@ *------- <<< Use Configuration Wizard in Context Menu >>> ------------------
   9              	@ *
  10              	@ * Copyright (C) 2008-2009 ARM Limited. All rights reserved.
  11              	@ * ARM Limited (ARM) is supplying this software for use with Cortex-M0
  12              	@ * essor based microcontrollers.  This file can be freely distributed
  13              	@ * within development tools that are supporting such ARM based essors.
  14              	@ *
  15              	@ * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  16              	@ * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  17              	@ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  18              	@ * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  19              	@ * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  20              	@ *
  21              	@ *****************************************************************************/
  22              	@
  23              	/*   Stack Configuration
  24              	@    Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
  25              	@
  26              	*/
  27              	
  28              		.set Stack_Size, 0x00000500
  29              	
  30              	                .section .STACK, "wx"  /* NOINIT, READWRITE, ALIGN=3*/
  31              	                .align 3
  32              	                .global __initial_sp
  33 0000 00000000 	Stack_Mem:      .space  Stack_Size
  33      00000000 
  33      00000000 
  33      00000000 
  33      00000000 
  34              	__initial_sp:
  35              	
  36              	/* <h> Heap Configuration
  37              	@   <o>  Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
  38              	@ </h>*/
  39              	
  40              		.set Heap_Size, 0x00000000
  41              	
  42              	                .section .HEAP, "x"  /*NOINIT, READWRITE, ALIGN=3*/
  43              	                .align 3
  44              	__heap_base:
  45              	Heap_Mem:        .space Heap_Size
  46              	__heap_limit:
  47              	
  48              	                @PRESERVE8
  49              	                .thumb
  50              	
  51              	/* Vector Table Mapped to Address 0 at Reset*/
  52              	                .section .text
  53              	                .global __Vectors
  54              	
  55              	__Vectors:
  56 0000 00000000 					.long     __initial_sp              @ Top of Stack
  57 0004 01000000 	                .long     Reset_Handler+1             @ Reset Handler
  58 0008 01000000 	                .long     NMI_IRQHandler+1            @ NMI Handler
  59 000c 01000000 	                .long     HardFault_IRQHandler+1      @ Hard Fault Handler
  60 0010 00000000 	                .long     0                         @ Reserved
  61 0014 00000000 	                .long     0                         @ Reserved
  62 0018 00000000 	                .long     0                         @ Reserved
  63 001c 00000000 	                .long     0                         @ Reserved
  64 0020 00000000 	                .long     0                         @ Reserved
  65 0024 00000000 	                .long     0                         @ Reserved
  66 0028 00000000 	                .long     0                         @ Reserved
  67 002c 01000000 	                .long     SVC_Handler+1               @ SVCall Handler
  68 0030 00000000 	                .long     0                         @ Reserved
  69 0034 00000000 	                .long     0                         @ Reserved
  70 0038 01000000 	                .long     PendSV_Handler+1            @ PendSV Handler
  71 003c 01000000 	                .long     SysTick_Handler+1           @ SysTick Handler
  72              	
  73              	                @ External Interrupts
  74 0040 01000000 	                .long     CT_IRQHandler+1      		@0: ct
  75 0044 01000000 	                .long     TIMER0_IRQHandler+1		    @1: timer0
  76 0048 01000000 	                .long     NVM0_IRQHandler+1           @2: NVM0
  77 004c 01000000 	                .long     ALGORITHM_IRQHandler+1      @3: algorithm
  78 0050 01000000 	                .long     SECURITY_IRQHandler+1       @4: security
  79 0054 00000000 					.long     0			 			    @5: Reserved
  80 0058 01000000 	                .long     APP_IRQHandler+1			@6: app
  81 005c 01000000 	                .long     TIMER1_IRQHandler+1         @7: timer1
  82 0060 01000000 	                .long     TIMER2_IRQHandler+1         @8: timer2
  83 0064 00000000 					.long     0			  			@9: Reserved
  84 0068 00000000 					.long     0			  			@10: Reserved
  85 006c 00000000 					.long     0			  			@11: Reserved
  86 0070 00000000 					.long     0			  			@12: Reserved
  87 0074 00000000 					.long     0			  			@13: Reserved
  88 0078 01000000 					.long     SPI_IRQHandler+1 			@14: SPI
  89 007c 01000000 					.long     GPIO_IRQHandler+1 		@15: Reserved
  90 0080 00000000 					.long     0			  			@16: Reserved
  91 0084 01000000 	                .long     RF_IRQHandler+1         	@17: rf
  92 0088 00000000 	                .long     0 						@18: I2C
  93 008c 00000000 	                .long     0           			@19: Reserved
  94 0090 00000000 	                .long     0                       @20: Reserved
  95 0094 00000000 	                .long     0                       @21: Reserved
  96 0098 00000000 	                .long     0                       @22: Reserved
  97 009c 00000000 	                .long     0                       @23: Reserved
  98 00a0 00000000 	                .long     0                       @24: Reserved
  99 00a4 00000000 	                .long     0                       @25: Reserved
 100 00a8 00000000 	                .long     0                       @26: Reserved
 101 00ac 00000000 	                .long     0                       @27: Reserved
 102 00b0 00000000 	                .long     0               		@28: Reserved
 103 00b4 00000000 	                .long     0                       @29: Reserved
 104 00b8 00000000 	                .long     0          				@30: Reserved
 105 00bc 00000000 	                .long     0            			@31: Reserved
 106              	
 107              	                .section .text   @, CODE, READONLY
 108              	
 109              	@ Reset Handler
 110              	Reset_Handler:
 111              	                .global Reset_Handler         @
 112              	                .extern main
 113              	                .extern SystemInit
 114              	                .extern _idata
 115              	start_copy:
 116 00c0 1448     		ldr	r0, =_idata
 117 00c2 1549     		ldr	r1, =_sdata
 118 00c4 154A     		ldr	r2, =_edata
 119 00c6 03E0     		b	check_finished
 120              	copy_data:
 121 00c8 0368     		ldr	r3, [r0]
 122 00ca 0B60     		str	r3, [r1]
 123 00cc 0430     		add r0, #4
 124 00ce 0431     		add r1, #4
 125              	check_finished:
 126 00d0 9142     		cmp	r1, r2
 127 00d2 F9DB     		blt	copy_data
 128              	
 129              	@  Clear uninitialised data ( = bss segment)
 130              	clear_bss:
 131 00d4 1249     	    ldr   	r1, =_sbss
 132 00d6 134A     		ldr		r2, =_ebss
 133 00d8 0020     	    mov     r0,#0
 134 00da 9142     	    cmp     r1,r2
 135 00dc 03D0     	    beq     2f
 136 00de 0860     	1:  str     r0, [r1]
 137 00e0 0431     		add 	r1, #4
 138 00e2 9142     	    cmp     r1,r2
 139 00e4 FBD1     	    bne     1b
 140              	2:
 141              	
 142 00e6 1048     	    ldr     r0, =__initial_sp
 143 00e8 8546     	    mov     sp, r0
 144 00ea 1048     	    ldr     r0, =SystemInit
 145 00ec 8047     	    blX     r0
 146 00ee 1048     		ldr     R0, =main
 147 00f0 0047     	    bx      R0
 148              	
 149              	@ Dummy Exception Handlers (infinite loops which can be modified)
 150              	NMI_IRQHandler:    		.weak  NMI_IRQHandler
 151 00f2 FEE7     	                		B       .
 152              	HardFault_IRQHandler:  	.weak  HardFault_IRQHandler
 153 00f4 FEE7     	                		B       .
 154              	SVC_Handler:       		.weak  SVC_Handler
 155 00f6 FEE7     	                		B       .
 156              	PendSV_Handler:    		.weak  PendSV_Handler
 157 00f8 FEE7     	                		B       .
 158              	SysTick_Handler:  		.weak  SysTick_Handler
 159 00fa FEE7     	                		B       .
 160              	CT_IRQHandler:			.weak	CT_IRQHandler
 161 00fc FEE7     							B		.
 162              	TIMER0_IRQHandler:		.weak   TIMER0_IRQHandler
 163 00fe FEE7     							B		.
 164              	NVM0_IRQHandler:		.weak	NVM0_IRQHandler
 165 0100 FEE7     							B		.
 166              	ALGORITHM_IRQHandler:	.weak	ALGORITHM_IRQHandler
 167 0102 FEE7     							B		.
 168              	SECURITY_IRQHandler:	.weak	SECURITY_IRQHandler
 169 0104 FEE7     							B		.
 170              	APP_IRQHandler:			.weak	APP_IRQHandler
 171 0106 FEE7     							B		.
 172              	TIMER1_IRQHandler:		.weak	TIMER1_IRQHandler
 173 0108 FEE7     							B		.
 174              	TIMER2_IRQHandler:		.weak	TIMER2_IRQHandler
 175 010a FEE7     							B		.
 176              	SPI_IRQHandler:			.weak	SPI_IRQHandler
 177 010c FEE7     							B		.
 178              	GPIO_IRQHandler:		.weak	GPIO_IRQHandler
 179 010e FEE7     							B		.
 180              	RF_IRQHandler:			.weak	RF_IRQHandler
 181 0110 FEE7     							B		.
 182 0112 C046     	                .align
 183              	
 184 0114 00000000 	            .end
 184      00000000 
 184      00000000 
 184      00000000 
 184      00000000 
DEFINED SYMBOLS
../src/starup_ARMCM1.S:28     *ABS*:00000500 Stack_Size
../src/starup_ARMCM1.S:34     .STACK:00000500 __initial_sp
../src/starup_ARMCM1.S:33     .STACK:00000000 Stack_Mem
../src/starup_ARMCM1.S:33     .STACK:00000000 $d
../src/starup_ARMCM1.S:40     *ABS*:00000000 Heap_Size
../src/starup_ARMCM1.S:44     .HEAP:00000000 __heap_base
../src/starup_ARMCM1.S:45     .HEAP:00000000 Heap_Mem
../src/starup_ARMCM1.S:46     .HEAP:00000000 __heap_limit
../src/starup_ARMCM1.S:55     .text:00000000 __Vectors
../src/starup_ARMCM1.S:110    .text:000000c0 Reset_Handler
../src/starup_ARMCM1.S:150    .text:000000f2 NMI_IRQHandler
../src/starup_ARMCM1.S:152    .text:000000f4 HardFault_IRQHandler
../src/starup_ARMCM1.S:154    .text:000000f6 SVC_Handler
../src/starup_ARMCM1.S:156    .text:000000f8 PendSV_Handler
../src/starup_ARMCM1.S:158    .text:000000fa SysTick_Handler
../src/starup_ARMCM1.S:160    .text:000000fc CT_IRQHandler
../src/starup_ARMCM1.S:162    .text:000000fe TIMER0_IRQHandler
../src/starup_ARMCM1.S:164    .text:00000100 NVM0_IRQHandler
../src/starup_ARMCM1.S:166    .text:00000102 ALGORITHM_IRQHandler
../src/starup_ARMCM1.S:168    .text:00000104 SECURITY_IRQHandler
../src/starup_ARMCM1.S:170    .text:00000106 APP_IRQHandler
../src/starup_ARMCM1.S:172    .text:00000108 TIMER1_IRQHandler
../src/starup_ARMCM1.S:174    .text:0000010a TIMER2_IRQHandler
../src/starup_ARMCM1.S:176    .text:0000010c SPI_IRQHandler
../src/starup_ARMCM1.S:178    .text:0000010e GPIO_IRQHandler
../src/starup_ARMCM1.S:180    .text:00000110 RF_IRQHandler
../src/starup_ARMCM1.S:115    .text:000000c0 start_copy
                            .text:00000000 $d
../src/starup_ARMCM1.S:116    .text:000000c0 $t
../src/starup_ARMCM1.S:125    .text:000000d0 check_finished
../src/starup_ARMCM1.S:120    .text:000000c8 copy_data
../src/starup_ARMCM1.S:130    .text:000000d4 clear_bss
../src/starup_ARMCM1.S:184    .text:00000114 $d

UNDEFINED SYMBOLS
_idata
_sdata
_edata
_sbss
_ebss
SystemInit
main
